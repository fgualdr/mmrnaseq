//Profile config names for nf-core/configs

params {
  config_profile_description = 'The European Institute for oncology HPC cluster profile '
  config_profile_contact = 'Francesco Gualdrini'

    max_memory = 100.GB
    max_cpus = 18
    max_time = '240.h'

}

timeline {
    overwrite = true
    enabled = true
    file = 'timeline.html'
}

dag {
    overwrite = true
    enabled = true
    file = 'pipeline_dag.html'
}

trace {
    overwrite = true
    enabled = true
    file = 'trace.txt'
}

report {
    overwrite = true
    enabled = true
    file = 'report.html'
}


singularity {
  enabled = true
  autoMounts = true
  runOptions = ' --bind /hpcnfs/ --bind /hpcscratch/ieo/ieo5244/ --bind /scratch/'
  envWhitelist = 'LD_PRELOAD,PETASUITE_REFPATH'
}

env { 
    PATH='$PATH:/hpcnfs/software/singularity/4.0.0/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
    LD_PRELOAD="/hpcnfs/techunits/bioinformatics/software/petagene/petalink_1.3.15/bin/petalink.so"
    PETASUITE_REFPATH="/hpcnfs/techunits/bioinformatics/software/petagene/petalink_1.3.15/species"
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


executor {
    $pbspro {
        queueSize = 10
        submitRateLimit = '5/1min'
        exitReadTimeout = '10 min'
    }

    $local {
        cpus = 2
        queueSize = 1
        memory = '6 GB'
    }
}

process {
  
    executor = 'pbspro'
    queue = 'workq'

    clusterOptions = { "-l select=1:ncpus=${task.cpus}:mem=${task.memory.toMega()}mb -l maxarray_20=1" }

    stageInMode = 'symlink'
    stageOutMode = 'copy'
    scratch = '/scratch/'
    container = '/hpcnfs/techunits/bioinformatics/singularity/genomics23_v2.17.sif'

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 5
    maxErrors = '-1'

	withLabel: 'process_low' {
        cpus = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
	}
 
	withLabel: 'process_medium' {
        cpus = { check_max( 5     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 18.h   * task.attempt, 'time'    ) }
	}
  
    withLabel: 'process_high' {
        cpus = { check_max( 10     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
  
    withLabel: 'process_high_memory' {
        cpus = { check_max( 5     * task.attempt, 'cpus'    ) }
        memory = { check_max( 41.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
  
    withLabel: 'process_long' {
        cpus = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }

    withLabel: 'process_picard' {
        cpus = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }

    withLabel: 'process_samtools_sort' {
        cpus = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 35.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }

    withName: 'STAR_GENOMEGENERATE' {
        cpus = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 41.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h   * task.attempt, 'time'    ) }
    }

    withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
        cpus = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 41.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h   * task.attempt, 'time'    ) }
    }
}